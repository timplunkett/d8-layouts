<?php

/**
 * @file
 * Contains install and update functions for Layout Builder.
 */

use Drupal\block\Entity\Block;
use Drupal\Core\Cache\Cache;
use Drupal\layout_builder\Entity\LayoutBuilderEntityViewDisplay;
use Drupal\layout_builder\Section;
use Drupal\layout_builder\SectionComponent;

/**
 * Implements hook_install().
 */
function layout_builder_install() {
  $displays = LayoutBuilderEntityViewDisplay::loadMultiple();
  /** @var \Drupal\layout_builder\Entity\LayoutEntityDisplayInterface[] $displays */
  foreach ($displays as $display) {
    // Create the first section from any existing Field Layout settings.
    $field_layout = $display->getThirdPartySettings('field_layout');
    if (isset($field_layout['id'])) {
      $field_layout += ['settings' => []];
      $display->appendSection(new Section($field_layout['id'], $field_layout['settings']));
    }

    // Sort the components by weight.
    $components = $display->get('content');
    uasort($components, 'Drupal\Component\Utility\SortArray::sortByWeightElement');
    foreach ($components as $name => $component) {
      $display->setComponent($name, $component);
    }
    $display->save();
  }

  if (\Drupal::moduleHandler()->moduleExists('block')) {
    $theme_region_map['bartik'] = [
      'sidebar_first' => [
        'layout_id' => 'layout_threecol_25_50_25',
        'component_region' => 'first',
        'section_region' => 'content',
      ],
      'content' => [
        'layout_id' => 'layout_threecol_25_50_25',
        'component_region' => 'second',
        'section_region' => 'content',
      ],
      'sidebar_second' => [
        'layout_id' => 'layout_threecol_25_50_25',
        'component_region' => 'third',
        'section_region' => 'content',
      ],
      'featured_bottom_first' => [
        'layout_id' => 'layout_threecol_33_34_33',
        'component_region' => 'first',
        'section_region' => 'featured_bottom',
      ],
      'featured_bottom_second' => [
        'layout_id' => 'layout_threecol_33_34_33',
        'component_region' => 'second',
        'section_region' => 'featured_bottom',
      ],
      'featured_bottom_third' => [
        'layout_id' => 'layout_threecol_33_34_33',
        'component_region' => 'third',
        'section_region' => 'featured_bottom',
      ],
      'footer_first' => [
        'layout_id' => 'layout_fourcol',
        'component_region' => 'first',
        'section_region' => 'footer',
      ],
      'footer_second' => [
        'layout_id' => 'layout_fourcol',
        'component_region' => 'second',
        'section_region' => 'footer',
      ],
      'footer_third' => [
        'layout_id' => 'layout_fourcol',
        'component_region' => 'third',
        'section_region' => 'footer',
      ],
      'footer_fourth' => [
        'layout_id' => 'layout_fourcol',
        'component_region' => 'fourth',
        'section_region' => 'footer',
      ],
    ];
    $uuid_generator = \Drupal::service('uuid');

    /** @var \Drupal\block\BlockInterface[] $blocks */
    $blocks = Block::loadMultiple();
    $themes = [];
    foreach ($blocks as $block) {
      $theme = $block->getTheme();

      // Populate the list of regions to ensure the correct order.
      if (!isset($themes[$theme])) {
        $region_list = system_region_list($theme);
        $themes[$theme] = array_fill_keys(array_keys($region_list), []);
      }

      // If the block's region is in the theme's region map, use the specified
      // values. Otherwise use default value.
      $old_region = $block->getRegion();
      if (isset($theme_region_map[$theme][$old_region])) {
        $layout_id = $theme_region_map[$theme][$old_region]['layout_id'];
        $component_region = $theme_region_map[$theme][$old_region]['component_region'];
        $section_region = $theme_region_map[$theme][$old_region]['section_region'];
      }
      else {
        $layout_id = 'layout_onecol';
        $component_region = 'content';
        $section_region = $old_region;
      }

      $themes[$theme][$section_region]['layout_id'] = $layout_id;
      $themes[$theme][$section_region]['layout_settings'] = [];
      $themes[$theme][$section_region]['components'][] = [
        'uuid' => $uuid_generator->generate(),
        'region' => $component_region,
        'configuration' => $block->get('settings'),
        'additional' => [],
        'weight' => $block->getWeight(),
      ];
    }

    // Save each theme's sections in a simple config file.
    $config_factory = \Drupal::configFactory();
    foreach ($themes as $theme => $regions) {
      // Only save populated regions and ensure the list is numerically indexed.
      $sections = array_values(array_filter($regions));
      $config_factory->getEditable("layout_builder.theme.$theme")
        ->set('sections', $sections)
        ->save();
    }
  }

  // Clear the rendered cache to ensure the new layout builder flow is used.
  // While in many cases the above change will not affect the rendered output,
  // the cacheability metadata will have changed and should be processed to
  // prepare for future changes.
  Cache::invalidateTags(['rendered']);
}
