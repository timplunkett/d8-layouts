<?php

/**
 * @file
 * Provides hook implementations for Layout Builder.
 */

use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Implements hook_help().
 */
function layout_builder_help($route_name) {
  switch ($route_name) {
    case 'help.page.layout_builder':
      $output = '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Layout Builder provides layout building utility, surprisingly.') . '</p>';
      $output .= '<p>' . t('For more information, see the <a href=":layout-builder-documentation">online documentation for the Layout Builder module</a>.', [':layout-builder-documentation' => 'https://www.drupal.org/docs/8/core/modules/layout_builder']) . '</p>';
      return $output;
  }
}

/**
 * Implements hook_form_FORM_ID_alter() for \Drupal\field_ui\Form\EntityViewDisplayEditForm.
 */
function layout_builder_form_entity_view_display_edit_form_alter(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
  $display = $form_state->getFormObject()->getEntity();
  $entity_type = \Drupal::entityTypeManager()->getDefinition($display->getTargetEntityTypeId());

  // Remove layout_builder__layout both visually and from the #fields handling.
  // This prevents any interaction with this field. It is rendered directly
  // in layout_builder_entity_view_display_alter().
  unset($form['fields']['layout_builder__layout']);
  unset($form['#fields'][array_search('layout_builder__layout', $form['#fields'])]);

  $form['layout'] = [
    '#type' => 'details',
    '#open' => TRUE,
    '#title' => t('Layout options'),
    '#tree' => TRUE,
  ];
  $form['layout']['allow_custom'] = [
    '#type' => 'checkbox',
    '#title' => t('Allow each @entity to have its layout customized.', [
      '@entity' => $entity_type->getSingularLabel(),
    ]),
    '#default_value' => $display->getThirdPartySetting('layout_builder', 'allow_custom', FALSE),
  ];

  // The submit handler should run before the entity is saved by the form.
  array_unshift($form['actions']['submit']['#submit'], 'layout_builder_form_entity_view_display_edit_submit');
}

/**
 * Form submission handler for layout options on the entity view display form.
 *
 * @see layout_builder_form_entity_view_display_edit_form_alter()
 */
function layout_builder_form_entity_view_display_edit_submit(&$form, FormStateInterface $form_state) {
  /** @var \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display */
  $display = $form_state->getFormObject()->getEntity();

  $original_value = $display->getThirdPartySetting('layout_builder', 'allow_custom', FALSE);
  $allow_custom = $form_state->getValue(['layout', 'allow_custom'], FALSE);

  // Only continue if the value has changed.
  if ($original_value !== $allow_custom) {
    $display->setThirdPartySetting('layout_builder', 'allow_custom', $allow_custom);
    $entity_type_id = $display->getTargetEntityTypeId();
    $bundle = $display->getTargetBundle();

    if ($allow_custom) {
      layout_builder_add_layout_section_field($entity_type_id, $bundle);
    }
    elseif ($field = FieldConfig::loadByName($entity_type_id, $bundle, 'layout_builder__layout')) {
      $field->delete();
    }
  }
}

/**
 * Adds a layout section field to a given bundle.
 *
 * @param string $entity_type_id
 *   The entity type ID.
 * @param string $bundle
 *   The bundle.
 * @param string $field_name
 *   (optional) The name for the layout section field. Defaults to
 *   'layout_builder__layout'.
 *
 * @return \Drupal\field\FieldConfigInterface
 *   A layout section field.
 */
function layout_builder_add_layout_section_field($entity_type_id, $bundle, $field_name = 'layout_builder__layout') {
  $field = FieldConfig::loadByName($entity_type_id, $bundle, $field_name);
  if (!$field) {
    $field_storage = FieldStorageConfig::loadByName($entity_type_id, $field_name);
    if (!$field_storage) {
      $field_storage = FieldStorageConfig::create([
        'entity_type' => $entity_type_id,
        'field_name' => $field_name,
        'type' => 'layout_section',
      ]);
      $field_storage->save();
    }

    $field = FieldConfig::create([
      'field_storage' => $field_storage,
      'bundle' => $bundle,
      'label' => t('Layout'),
    ]);
    $field->save();
  }
  return $field;
}

/**
 * Implements hook_entity_view_display_alter().
 */
function layout_builder_entity_view_display_alter(EntityViewDisplayInterface $display, array $context) {
  // @todo Expand to work for all view modes.
  if (!in_array($context['view_mode'], ['full', 'default'])) {
    return;
  }

  if ($display->getThirdPartySetting('layout_builder', 'allow_custom', FALSE)) {
    /** @var \Drupal\Core\Field\FieldDefinitionInterface[] $field_definitions */
    $field_definitions = \Drupal::service('entity_field.manager')->getFieldDefinitions($display->getTargetEntityTypeId(), $display->getTargetBundle());
    // Remove all display-configurable fields.
    foreach (array_keys($display->getComponents()) as $name) {
      if (isset($field_definitions[$name]) && $field_definitions[$name]->isDisplayConfigurable('view')) {
        $display->removeComponent($name);
      }
    }

    // Force the layout to render with no label.
    $display->setComponent('layout_builder__layout', ['label' => 'hidden']);
  }
}
